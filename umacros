#!/usr/bin/env bash

# =====================================================
# If directory does not exist, create it.
# =====================================================
checkDir () { [[ ! -d "$1" ]] && mkdir -p "$1"; }



# =====================================================
# Slice all arguments into allArgs array
# =====================================================
tmpAllArgs_1="${@//--/$'\n'--}"
tmpAllArgs_2="${tmpAllArgs_1// -/$'\n'-}"
IFS=$'\n' read -d "" -ra allArgs <<< "${tmpAllArgs_2}"



# =====================================================
# Process each of sliced arguments into
# its own array
# =====================================================
pArg () {
  local tmp="$1"
  IFS=$'\n' read -d "" -ra currentArg <<< "${1// /$'\n'}"
}


# =====================================================
# Print colored string along with optional non-colored
# =====================================================
paint () {
  #local tmpColorArgs="${@//--/$'\n'--}"
  #local tmpColorArgs_2="${tmpColorArgs// -/$'\n'-}"
  #IFS=$'\n' read -d "" -ra colorArgs <<< "${tmpColorArgs_2}"

  #local bSeq="\x01\033["
  #local eSeq="\x02"

  #case arg in "${colorArgs[@]}"
  #  "-fg") 
  #    local fgSeq="${bSeq}"
  #    ;;
  #  "-bg") ;;
  #  "-m") ;;
  #esac

  local output="$1"
  local color="$2"
  local message="$3"
  local rawMessage="$4"
  local resetSeq="\x01\033[0m\x02"

  case "$output" in
    fg) : "3" ;;
    bg) : "4" ;;
    *) echo "[ERR] '$output' is an unknown color output" ;;
  esac
  local output="$_"
  
  case $color in
    black)  : 0 ;;
    red)    : 1 ;;
    green)  : 2 ;;
    yellow) : 3 ;;
    blue)   : 4 ;;
    purple) : 5 ;;
    cyan)   : 6 ;;
    white)  : 7 ;;
    *) echo "[ERR] '$color' is an unknown color" ;;
  esac
  local color="$_"

  echo -e "\x01\033[${output}${color}m\x02${message}${resetSeq}${rawMessage}"
}



# =====================================================
# Get full path of supplied relative directory
# =====================================================
fullPath () {
  # Remove ending /
  local currentTarget="${1/%\//}"

  # If target is a path
  if [[ "$currentTarget" =~ "/" ]]; then
    # Split last item and path
    IFS=" " read -d "" -r dirName lastItem <<< "${currentTarget%\/*} ${currentTarget##*\/}"

    echo "$(cd "$dirName"; pwd)/$lastItem"
  else
    # Append current dir to the item
    echo "$PWD/$currentTarget"
  fi
}



# =====================================================
# Build vi mode for fzf
# =====================================================
fzfModeBuild () {
  local tmpFzfNormalUnbind=(${fzfBindings[@]/:*/)})
  local tmpFzfNormalUnbind_2="${tmpFzfNormalUnbind[@]/#/unbind\(}"
  
  local fzfNormalUnbind="${tmpFzfNormalUnbind_2// /+}"
  local fzfNormalRebind="${fzfNormalUnbind//unbind/rebind}"

  local fzfMode=(
    "i:enable-search+$fzfNormalUnbind+change-prompt($fzfInsertMsg)+unbind(i)"
    "esc:disable-search+$fzfNormalRebind+change-prompt($fzfNormalMsg)+rebind(i)"
    "change:first"
    )
  
  fzfBindings+=( "${fzfMode[@]}" )
   
  local tmpBinds="${fzfBindings[@]// /SPACE}"
  local tmpBinds_2="${tmpBinds// /,}"
  
  allFzfBinds="${tmpBinds_2//SPACE/ }"
}

fzfMenu () {
  fzfNormalPrompt="$(paint bg blue " N ") $1"
  fzfInsertPrompt="$(paint bg purple " I ") $1"
  
  local menuFzfBindings=(
    "s:toggle"
    "p:toggle-in"
    "n:toggle-out"
    "a:select-all"
    "d:deselect-all"
    "g:first"
    "G:last"
    "j:down"
    "k:up"
    "q:abort"
  )
  
  local tmpFzfNormalUnbind=(${menuFzfBindings[@]/:*/)})
  local tmpFzfNormalUnbind_2="${tmpFzfNormalUnbind[@]/#/unbind\(}"
  
  local fzfNormalUnbind="${tmpFzfNormalUnbind_2// /+}"
  local fzfNormalRebind="${fzfNormalUnbind//unbind/rebind}"

  local fzfMode=(
    "i:enable-search+$fzfNormalUnbind+unbind(i)+change-prompt($fzfInsertPrompt)"
    "esc:disable-search+$fzfNormalRebind+unbind(i)+change-prompt($fzfNormalPrompt)"
    "change:first"
    )
  
  local menuFzfBindings+=( "${fzfMode[@]}" )
   
  local tmpBinds="${menuFzfBindings[@]// /SPACE}"
  local tmpBinds_2="${tmpBinds// /,}"
  
  allFzfBinds="${tmpBinds_2//SPACE/ }"
}
